const webpack = require('webpack');
const path = require('path');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const postcssImport = require('postcss-import');
const autoprefixer = require('autoprefixer');


/**
 * Run `webpack` with NODE_ENV=development to do a dev build.
 *
 * Defaults to production.
 */
const DEVELOPMENT = process.env.NODE_ENV === 'development';

/**
 * Output bundles to /build directory.
 */
const OUTPUT_DIR = path.join(__dirname, 'build');

/**
 * Resolve all modules from this directory.
 */
const RESOLVE_DIR = __dirname;


/**
 * JS loader configuration.
 *
 * Compile with Babel and ignore node_modules.
 */
const JS_LOADER = {
  test: /\.jsx?$/,
  loader: 'babel-loader',
  exclude: /node_modules/,
};

/**
 * JSON loader configuration.
 *
 * (some npm modules require .json files).
 */
const JSON_LOADER = {
  test: /\.json$/,
  loader: 'json-loader',
};


/**
 * CSS Modules Loader configuration.
 */

// The pattern for classnames generated by CSS modules:
const CSS_MODULES_CLASS_PATTERN = '[name]__[local]___[hash:base64:5]';

// The name of the postcss plugin pack for CSS Modules.
const CSS_MODULES_PACK = 'cssmodules';

// Params for css-loader to set up CSS Modules with a specific class pattern
// and add postcss-loader:
const CSS_MODULES = `?modules&localIdentName=${CSS_MODULES_CLASS_PATTERN}&importLoaders=1!postcss-loader?pack=${CSS_MODULES_PACK}`;

// The name of the postcss plugin pack for global CSS.
const CSS_PACK = 'css';

/**
 * postcssImport is used to add the shared classes in src/styles/modules to
 * src/styles/common.css to avoid the following issue when using CSS Modules'
 * composition feature:
 *     https://github.com/css-modules/css-modules/issues/12
 * See also:
 *     https://github.com/postcss/postcss-loader#integration-with-postcss-import
 */
const cssImportPlugin = postcssImport({
  addDependencyTo: webpack,
});


const client = {
  devtool: DEVELOPMENT ? 'cheap-module-source-map': 'source-map',

  entry: {
    main: [
      './src/client',
    ],
    vendor: [
      'lodash',
      'react',
      'react-dom',
      'sculpt',
    ],
  },

  output: {
    path: `${OUTPUT_DIR}/client`,
    filename: '[name].js',
    chunkFilename: '[id].chunk.js',
    publicPath: '/static/',
  },

  resolve: {
    root: RESOLVE_DIR,
  },

  module: {
    loaders: [
      JS_LOADER,
      JSON_LOADER,
      {
        test: /\.css$/,
        exclude: [
          /node_modules/,
          /\.global\.css$/,
        ],
        loader: DEVELOPMENT ? `style-loader!css-loader${CSS_MODULES}` : ExtractTextPlugin.extract('style-loader', `css-loader${CSS_MODULES}`),
      },
      {
        test: /\.css$/,
        include: /node_modules/,
        loader: DEVELOPMENT ? `style-loader!css-loader` : ExtractTextPlugin.extract('style-loader', `css-loader!postcss-loader?pack=css`),
      },
      {
        test: /\.global\.css$/,
        loader: DEVELOPMENT ? `style-loader!css-loader` : ExtractTextPlugin.extract('style-loader', `css-loader!postcss-loader?pack=css`),
      },
    ],
  },

  postcss: function () {
    if (DEVELOPMENT) {
      return {
        [CSS_MODULES_PACK]: [cssImportPlugin],
        [CSS_PACK]: [],
      };
    } else {
      return {
        [CSS_MODULES_PACK]: [cssImportPlugin, autoprefixer],
        [CSS_PACK]: [autoprefixer],
      };
    }
  },

  plugins: [
    new webpack.optimize.CommonsChunkPlugin({
      name: 'vendor',
      minChunks: Infinity,
    }),
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV),
      },
    }),
  ],
};

if (!DEVELOPMENT) {
  client.plugins.push(
    new ExtractTextPlugin('[name].css', {
      // This ensures chunk CSS is only loaded on demand. This may create a FOUC.
      allChunks: false,
    }),
    // Aggressively compress main chunk.
    new webpack.optimize.UglifyJsPlugin({
      include: /main/,
    }),
    // Only remove comments of vendor chunks.
    new webpack.optimize.UglifyJsPlugin({
      exclude: /main/,
      sourceMap: false,
      compress: {
        warnings: false
      },
      output: {
        comments: false
      },
    })
  );
}


const server = {
  devtool: DEVELOPMENT ? 'cheap-module-source-map' : 'source-map',

  entry: './src/server.js',

  target: 'node',

  // Only bundle the source code. All other imports are treated as externals.
  // https://webpack.github.io/docs/configuration.html#externals
  externals: /^[a-z\-0-9]+$/,

  resolve: {
    root: RESOLVE_DIR,
  },

  output: {
    path: `${OUTPUT_DIR}/server`,
    filename: 'index.js',
    libraryTarget: 'commonjs2',
  },

  // Node variables:
  //     http://jlongster.com/Backend-Apps-with-Webpack--Part-II#Node-Variables
  node: {
    __filename: true,
    __dirname: true,
  },

  module: {
    loaders: [

      JS_LOADER,

      JSON_LOADER,

      // CSS Modules.
      {
        test: /\.css$/,
        exclude: [
          /node_modules/,
          /\.global\.css$/,
        ],
        loader: `css-loader/locals${CSS_MODULES}`,
      },

      // CSS in node_modules.
      {
        test: /\.css$/,
        include: /node_modules/,
        loader: 'null-loader',
      },

      // Global CSS aka .global.css files.
      {
        test: /\.global\.css$/,
        loader: 'null-loader',
      },
    ]
  },

  postcss: function () {
    return {
      [CSS_MODULES_PACK]: [cssImportPlugin],
    };
  },

  plugins: [
    // Import source-map-support at top of bundle for proper node source maps:
    //     http://jlongster.com/Backend-Apps-with-Webpack--Part-I#Sourcemaps,-CSS,-and
    new webpack.BannerPlugin('require("source-map-support").install();', {
      raw: true,
      entryOnly: false,
    }),
  ],
};


module.exports = process.env.HMR ? server : [client, server];

